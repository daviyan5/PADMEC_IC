function problems = Tests()
    meshfiles = [];
    for i = 0:12
        meshfiles = [meshfiles, sprintf("./mesh/box_%dacc.mat", i)];
    end
    meshfiles_qfive = [];
    for i = 2:7
        meshfiles_qfive = [meshfiles_qfive, sprintf("./mesh/box_%d.mat", i)];
    end
    %solver = qfive_spot(mesh, [6, 4, 1]);
    problems = tests(meshfiles, meshfiles_qfive);
end    
function problems = tests(meshfiles, meshfiles_qfive)
    p1 = Problem().init_problem("linear_case", @linear_case, meshfiles);
    p2 = Problem().init_problem("qfive_spot", @qfive_spot, meshfiles_qfive);
    p3 = Problem().init_problem("extra_case1", @extra_case1, meshfiles);
    p4 = Problem().init_problem("extra_case2", @extra_case2, meshfiles);
    problems = [p1, p2, p3, p4];
    
    nrepeats = 5;
    for i = 1:length(problems)
        k = 1;
        solver_name = "";
        for meshfile = problems(i).meshfiles
            mesh = load(meshfile);
            for j = 1:nrepeats
                if problems(i).name ~= "qfive_spot"
                    solver = problems(i).handle(mesh);
                    solver_name = solver.name;
                else
                    solver = problems(i).handle(mesh, [6, 4, 1]);
                end
                sprintf("Finished %d/%d of %d/%d", j, nrepeats, i, 
                problems(i) = problems(i).add_to_problem(k, j, solver.mesh.nvols, solver.error, solver.times, solver.memory);
            end
            k = k + 1;
        end
        pr = problems(i);
        name = solver_name;
        meshfiles = pr.meshfiles;
        nvols = pr.nvols_arr;
        error = pr.avg_error_arr;
        time = convert_to_arrays(pr.avg_time_arr);
        memory = pr.avg_memory_arr;
        save(sprintf("vtks/%s.mat", problems(i).name), "name", "meshfiles", "nvols", "error", "time", "memory");
    end

end
function arr = convert_to_arrays(cell_of_dict)
    arr = zeros(length(cell_of_dict), length(cell_of_dict{1}.keys) - 1);
    for i = 1:length(cell_of_dict)
        d = [];
        a = cell_of_dict{i};
        a("TPFA System Preparation") = a("TPFA System Preparation") +  a("TPFA Boundary Conditions");
        a("TPFA Boundary Conditions") = [];
        for key = a.keys
            d = [d, a(key)];
        end
        a("Total") = sum(d);
        arr(i, :) = d;
    end
end

function tensor = get_tensor(nvols, value)
    tensor = (ones(3, 3, nvols) * value) .* eye(3);
end
function tensor = get_random_tensor(nvols)
    tensor = rand(3, 3, nvols) .* eye(3);
end 

function solver = linear_case(mesh)
    function d = dirichlet(x, y, z)
        d = x + y + z;
        return
    end
    function n = neumann(x, y, z)
        n = zeros(1, length(x));
    end
    function s = source(x, y, z)
        s = zeros(1, length(x));
    end
    permeability = get_tensor(mesh.nvols, 1.);
    xv = mesh.volumes_centers(:, 1);
    yv = mesh.volumes_centers(:, 2);
    zv = mesh.volumes_centers(:, 3);
    an = dirichlet(xv, yv, zv);
    keys = ["check", "name", "mesh", "permeability", "dirichlet", "neumann", "analytical", "source"];
    vals = {true, "x + y + z", mesh, permeability, @dirichlet, @neumann, an, @source};
    args = dictionary(keys, vals);
    solver = Solver();
    solver = solver.solve_TPFA(args);
end

function solver = quadratic_case(mesh)
    function d = dirichlet(x, y, z)
        d = x.^2 + y.^2 + z.^2;
    end
    function n = neumann(x, y, z)
        n = zeros(1, length(x));
    end
    function s = source(x, y, z)
        s = ones(1, length(x)) * -6;
    end
    permeability = get_tensor(mesh.nvols, 1.);
    xv = mesh.volumes_centers(:, 1);
    yv = mesh.volumes_centers(:, 2);
    zv = mesh.volumes_centers(:, 3);
    an = dirichlet(xv, yv, zv);
    keys = ["check", "name", "mesh", "permeability", "dirichlet", "neumann", "analytical", "source"];
    vals = {true, "x^2 + y^2 + z^2", mesh, permeability, @dirichlet, @neumann, an, @source};
    args = dictionary(keys, vals);
    solver = Solver();
    solver = solver.solve_TPFA(args);
end

function solver = extra_case1(mesh)
    function d = dirichlet(x, y, z)
        d = sin(x) + cos(y) + exp(z);
    end
    function n = neumann(x, y, z)
        n = zeros(1, length(x));
    end
    function s = source(x, y, z)
        s = (sin(x) + cos(y) - exp(z)).';
    end
    permeability = get_tensor(mesh.nvols, 1.);
    xv = mesh.volumes_centers(:, 1);
    yv = mesh.volumes_centers(:, 2);
    zv = mesh.volumes_centers(:, 3);
    an = dirichlet(xv, yv, zv);
    keys = ["check", "name", "mesh", "permeability", "dirichlet", "neumann", "analytical", "source"];
    vals = {true, "sin(x) + cos(y) + exp(z)", mesh, permeability, @dirichlet, @neumann, an, @source};
    args = dictionary(keys, vals);
    solver = Solver();
    solver = solver.solve_TPFA(args);
end

function solver = extra_case2(mesh)
    function d = dirichlet(x, y, z)
        d = (x + 1) .* log(1 + x) + 1 ./ (y + 1) + z.^2;
    end
    function n = neumann(x, y, z)
        n = zeros(1, length(x));
    end
    function s = source(x, y, z)
        s = (-2 - (1 ./ (1 + x)) - (2 ./ ((1 + y) .^ 3))).';
    end
    permeability = get_tensor(mesh.nvols, 1.);
    xv = mesh.volumes_centers(:, 1);
    yv = mesh.volumes_centers(:, 2);
    zv = mesh.volumes_centers(:, 3);
    an = dirichlet(xv, yv, zv);
    keys = ["check", "name", "mesh", "permeability", "dirichlet", "neumann", "analytical", "source"];
    vals = {true, "(x + 1) * log(1 + x) + 1/(y + 1) + z^2", mesh, permeability, @dirichlet, @neumann, an, @source};
    args = dictionary(keys, vals);
    solver = Solver();
    solver = solver.solve_TPFA(args);
end

function solver = qfive_spot(mesh, box_dimensions)
    Lx = box_dimensions(1);
    Ly = box_dimensions(2);
    Lz = box_dimensions(3);
    d1 = 10000.;
    d2 = 1.;
    k1 = 100.;
    k2 = 100.;
    vq = 0.;
    function d = dirichlet(x, y, z)
        p1 = 0.1;
        p2 = 0.1;
        l1 = Lx / 8;
        c1 = Ly / 8;
        l2 = Lx / 8;
        c2 = Ly / 8;
        dist0 = (x >= 0) & (x <= l1) & (y >= 0) & (y <= c1);
        dist1 = (x >= Lx - l2) & (x <= Lx) & (y >= Ly - c2) & (y <= Ly);
        v1 = find(dist0);
        v2 = find(dist1);
        
        d = zeros(1, length(x)) * NaN;
        d(v1) = d1;
        d(v2) = d2;

    end
    function a_p = analytical(x, y, z)
        ref = load("vtks/QFiveSpotRef.mat");

        xr  = ref.x;
        yr  = ref.y;
        pr  = ref.p;

        n   = round(sqrt(length(x)));

        dx  = Lx / n;
        dy  = Ly / n;

        i = ceil(yr ./ dy);
        j = ceil(xr ./ dx);

        idx = (i - 1) .* n + j;
        a_p = zeros(1, n * n);
        freq = zeros(1, n * n);
        
        mx = size(idx);
        for i = 1:mx(2)
            a_p(idx(i)) = a_p(idx(i)) + pr(i);
            freq(idx(i)) = freq(idx(i)) + 1;
        end

        m = freq(1);
        a_p = a_p ./ m;

    end
    function n = neumann(x, y, z)
        n = zeros(1, length(x));
    end
    function s = source(x, y, z)
        s = ones(1, length(x)) * vq;
    end
    permeability = get_tensor(mesh.nvols, 1.);
    xv = mesh.volumes_centers(:, 1);
    yv = mesh.volumes_centers(:, 2);
    zv = mesh.volumes_centers(:, 3);
    an = analytical(xv, yv, zv).';
    keys = ["check", "name", "mesh", "permeability", "dirichlet", "neumann", "analytical", "source"];
    vals = {true, "QFiveSpot", mesh, permeability, @dirichlet, @neumann, an, @source};
    args = dictionary(keys, vals);
    solver = Solver();
    solver = solver.solve_TPFA(args);
end